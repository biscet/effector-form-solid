import{createStore,combine,sample,merge}from"effector";import{createCombineValidator}from"./validation";import{createFormUnit}from"./create-form-unit";export function createField(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;const p="function"==typeof b.init?b.init():b.init,q=createFormUnit.store({domain:c,existing:null===(d=b.units)||void 0===d?void 0:d.$value,init:p},{sid:`${a}-$value`}),r=createFormUnit.store({domain:c,existing:null===(e=b.units)||void 0===e?void 0:e.$errors,init:[]},{sid:`${a}-$errors`}),s=r.map(a=>a[0]?a[0]:null),t=createFormUnit.store({domain:c,existing:null===(f=b.units)||void 0===f?void 0:f.$initValue,init:p},{sid:`${a}-$initValue`}),u=createFormUnit.store({domain:c,existing:null===(g=b.units)||void 0===g?void 0:g.$isTouched,init:!1},{sid:`${a}-$touched`}),v=combine(q,t,(a,b)=>a!==b),w=createFormUnit.event({domain:c,existing:null===(h=b.units)||void 0===h?void 0:h.onChange}),x=createFormUnit.event({domain:c,existing:null===(i=b.units)||void 0===i?void 0:i.onBlur}),y=createFormUnit.event({domain:c,existing:null===(j=b.units)||void 0===j?void 0:j.changed}),z=createFormUnit.event({domain:c,existing:null===(k=b.units)||void 0===k?void 0:k.addError}),A=createFormUnit.event({domain:c,existing:null===(l=b.units)||void 0===l?void 0:l.validate}),B=createFormUnit.event({domain:c,existing:null===(m=b.units)||void 0===m?void 0:m.resetErrors}),C=createFormUnit.event({domain:c,existing:null===(n=b.units)||void 0===n?void 0:n.resetValue}),D=createFormUnit.event({domain:c,existing:null===(o=b.units)||void 0===o?void 0:o.reset}),E=s.map(a=>null===a),F=s.map(a=>(null===a||void 0===a?void 0:a.errorText)||""),G=combine({value:q,errors:r,firstError:s,isValid:E,isDirty:v,isTouched:u}),H={value:q,initValue:t,isValid:E,isDirty:v,touched:u,errors:r,firstError:s,errorText:F,onChange:w,onBlur:x,addError:z,validate:A,reset:D,resetErrors:B,resetValue:C};return{changed:y,name:a,$initValue:t,$value:q,$errors:r,$firstError:s,$errorText:F,$isValid:E,$isDirty:v,$isTouched:u,$touched:u,$field:G,onChange:w,onBlur:x,addError:z,validate:A,set:w,reset:D,resetErrors:B,resetValue:C,filter:b.filter,"@@unitShape":()=>H}}export function bindValidation(a){const{form:b,field:c,fieldConfig:d}=a,e=d.rules||[],f=b.validateOn||["submit"],g=d.validateOn||[],{$value:h,$errors:i,onBlur:j,changed:k,addError:l,validate:m,resetErrors:n,resetValue:o,reset:p}=c,q="function"==typeof e?createStore([],{sid:`${c.name}-$rulesSources`}):combine(e.map(({source:a},b)=>{const d=`${c.name}-$rulesSources-${b}`;return a||createStore(null,{sid:d})})),r=createCombineValidator(e),s=new Set([...f,...g]),t=[];if(s.has("submit")){const a=sample({source:combine({fieldValue:h,form:b.$values,rulesSources:q}),clock:b.submit});t.push(a)}s.has("blur")&&t.push(sample({source:combine({fieldValue:h,form:b.$values,rulesSources:q}),clock:j})),s.has("change")&&t.push(sample({source:combine({fieldValue:h,form:b.$values,rulesSources:q}),clock:merge([k,o,b.resetValues])})),t.push(sample({source:combine({fieldValue:h,form:b.$values,rulesSources:q}),clock:m})),t.push(sample({source:combine({fieldValue:h,form:b.$values,rulesSources:q}),clock:b.validate}));const u=sample({source:h,clock:l,fn:(a,{rule:b,errorText:c})=>({rule:b,value:a,errorText:c})}),v=sample({source:h,clock:b.addErrors,fn:(a,b)=>({value:a,newErrors:b})});i.on(t,(a,{form:b,fieldValue:c,rulesSources:d})=>r(c,b,d)).on(u,(a,b)=>[b,...a]).on(v,(a,{value:b,newErrors:d})=>{const e=[];for(const f of d)f.field===c.name&&e.push({value:b,rule:f.rule,errorText:f.errorText});return[...e,...a]}).reset(n,b.reset,p,b.resetErrors),s.has("change")||i.reset(k)}export function bindChangeEvent({field:a,form:b}){const{$value:c,$initValue:d,$touched:e,onChange:f,changed:g,name:h,reset:i,resetValue:j,filter:k}=a,{setForm:l,setInitialForm:m,resetForm:n,resetTouched:o,resetValues:p}=b,q=sample({source:d,clock:merge([i,j,p,n])});e.on(g,()=>!0).reset(i,n,o),k?sample({source:f,filter:k,target:g}):sample({source:f,filter:()=>!0,target:g}),d.on(m,(a,b)=>b.hasOwnProperty(h)?b[h]:a),c.on(g,(a,b)=>b).on([l,m],(a,b)=>b.hasOwnProperty(h)?b[h]:a).on(q,(a,b)=>b)}