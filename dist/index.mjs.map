{"version":3,"file":"index.mjs","sources":["../src/effector-forms/create-form-unit.js","../src/effector-forms/field.js","../src/effector-forms/validation.js","../src/effector-forms/factory.js","../src/solid-hooks.jsx"],"sourcesContent":["import { createStore, createEvent } from 'effector';\r\n\r\nfunction store({ init, domain, existing }, effectorData) {\r\n  if (existing) {\r\n    return existing;\r\n  }\r\n\r\n  return domain\r\n    ? domain.createStore(init, effectorData)\r\n    : createStore(init, effectorData);\r\n}\r\n\r\nfunction event({ domain, existing }) {\r\n  if (existing) {\r\n    return existing;\r\n  }\r\n\r\n  return domain ? domain.createEvent() : createEvent();\r\n}\r\n\r\nexport const createFormUnit = {\r\n  store,\r\n  event\r\n};\r\n","import {\r\n  createStore, combine, sample, merge\r\n} from 'effector';\r\nimport { createCombineValidator } from './validation';\r\nimport { createFormUnit } from './create-form-unit';\r\n\r\nexport function createField(fieldName, fieldConfig, domain) {\r\n  var _a; var _b; var _c; var _d; var _e; var _f; var _g; var _h; var _j; var _k; var _l; var\r\n    _m;\r\n\r\n  const initValue = typeof fieldConfig.init === 'function'\r\n    ? fieldConfig.init()\r\n    : fieldConfig.init;\r\n\r\n  const $value = createFormUnit.store({\r\n    domain,\r\n    existing: (_a = fieldConfig.units) === null || _a === void 0 ? void 0 : _a.$value,\r\n    init: initValue\r\n  }, {\r\n    sid: `${fieldName}-$value`\r\n  });\r\n\r\n  const $errors = createFormUnit.store({\r\n    domain,\r\n    existing: (_b = fieldConfig.units) === null || _b === void 0 ? void 0 : _b.$errors,\r\n    init: []\r\n  }, {\r\n    sid: `${fieldName}-$errors`\r\n  });\r\n\r\n  const $firstError = $errors.map((errors) => errors[0] ? errors[0] : null);\r\n  const $initValue = createFormUnit.store({\r\n    domain,\r\n    existing: (_c = fieldConfig.units) === null || _c === void 0 ? void 0 : _c.$initValue,\r\n    init: initValue\r\n  }, {\r\n    sid: `${fieldName}-$initValue`\r\n  });\r\n\r\n  const $touched = createFormUnit.store({\r\n    domain,\r\n    existing: (_d = fieldConfig.units) === null || _d === void 0 ? void 0 : _d.$isTouched,\r\n    init: false\r\n  }, {\r\n    sid: `${fieldName}-$touched`\r\n  });\r\n\r\n  const $isDirty = combine($value, $initValue, (value, initValue) => value !== initValue);\r\n  const onChange = createFormUnit.event({\r\n    domain,\r\n    existing: (_e = fieldConfig.units) === null || _e === void 0 ? void 0 : _e.onChange\r\n  });\r\n\r\n  const onBlur = createFormUnit.event({\r\n    domain,\r\n    existing: (_f = fieldConfig.units) === null || _f === void 0 ? void 0 : _f.onBlur\r\n  });\r\n\r\n  const changed = createFormUnit.event({\r\n    domain,\r\n    existing: (_g = fieldConfig.units) === null || _g === void 0 ? void 0 : _g.changed\r\n  });\r\n\r\n  const addError = createFormUnit.event({\r\n    domain,\r\n    existing: (_h = fieldConfig.units) === null || _h === void 0 ? void 0 : _h.addError\r\n  });\r\n\r\n  const validate = createFormUnit.event({\r\n    domain,\r\n    existing: (_j = fieldConfig.units) === null || _j === void 0 ? void 0 : _j.validate\r\n  });\r\n\r\n  const resetErrors = createFormUnit.event({\r\n    domain,\r\n    existing: (_k = fieldConfig.units) === null || _k === void 0 ? void 0 : _k.resetErrors\r\n  });\r\n\r\n  const resetValue = createFormUnit.event({\r\n    domain,\r\n    existing: (_l = fieldConfig.units) === null || _l === void 0 ? void 0 : _l.resetValue\r\n  });\r\n\r\n  const reset = createFormUnit.event({\r\n    domain,\r\n    existing: (_m = fieldConfig.units) === null || _m === void 0 ? void 0 : _m.reset\r\n  });\r\n\r\n  const $isValid = $firstError.map((firstError) => firstError === null);\r\n  const $errorText = $firstError.map((firstError) => (firstError === null || firstError === void 0 ? void 0 : firstError.errorText) || '');\r\n  const $field = combine({\r\n    value: $value,\r\n    errors: $errors,\r\n    firstError: $firstError,\r\n    isValid: $isValid,\r\n    isDirty: $isDirty,\r\n    isTouched: $touched\r\n  });\r\n\r\n  const unitShape = {\r\n    value: $value,\r\n    initValue: $initValue,\r\n    isValid: $isValid,\r\n    isDirty: $isDirty,\r\n    touched: $touched,\r\n    errors: $errors,\r\n    firstError: $firstError,\r\n    errorText: $errorText,\r\n    onChange,\r\n    onBlur,\r\n    addError,\r\n    validate,\r\n    reset,\r\n    resetErrors,\r\n    resetValue\r\n  };\r\n\r\n  return {\r\n    changed,\r\n    name: fieldName,\r\n    $initValue,\r\n    $value,\r\n    $errors,\r\n    $firstError,\r\n    $errorText,\r\n    $isValid,\r\n    $isDirty,\r\n    $isTouched: $touched,\r\n    $touched,\r\n    $field: $field,\r\n    onChange,\r\n    onBlur,\r\n    addError,\r\n    validate,\r\n    set: onChange,\r\n    reset,\r\n    resetErrors,\r\n    resetValue,\r\n    filter: fieldConfig.filter,\r\n    '@@unitShape': () => unitShape\r\n  };\r\n}\r\n\r\nexport function bindValidation(params) {\r\n  const { form, field, fieldConfig } = params;\r\n  const rules = fieldConfig.rules || [];\r\n  const formValidationEvents = form.validateOn || ['submit'];\r\n  const fieldValidationEvents = fieldConfig.validateOn || [];\r\n  const {\r\n    $value, $errors, onBlur, changed, addError, validate, resetErrors, resetValue, reset\r\n  } = field;\r\n  const rulesSources = typeof rules === 'function'\r\n    ? createStore([], { sid: `${field.name}-$rulesSources` })\r\n    : combine(rules.map(({ source }, i) => {\r\n      const sid = `${field.name}-$rulesSources-${i}`;\r\n      return source || createStore(null, { sid });\r\n    }));\r\n\r\n  const validator = createCombineValidator(rules);\r\n  const eventsNames = new Set([...formValidationEvents, ...fieldValidationEvents]);\r\n  const validationEvents = [];\r\n\r\n  if (eventsNames.has('submit')) {\r\n    const validationTrigger = sample({\r\n      source: combine({\r\n        fieldValue: $value,\r\n        form: form.$values,\r\n        rulesSources\r\n      }),\r\n      clock: form.submit\r\n    });\r\n\r\n    validationEvents.push(validationTrigger);\r\n  }\r\n\r\n  if (eventsNames.has('blur')) {\r\n    validationEvents.push(sample({\r\n      source: combine({\r\n        fieldValue: $value,\r\n        form: form.$values,\r\n        rulesSources\r\n      }),\r\n      clock: onBlur\r\n    }));\r\n  }\r\n\r\n  if (eventsNames.has('change')) {\r\n    validationEvents.push(sample({\r\n      source: combine({\r\n        fieldValue: $value,\r\n        form: form.$values,\r\n        rulesSources\r\n      }),\r\n      clock: merge([changed, resetValue, form.resetValues])\r\n    }));\r\n  }\r\n\r\n  validationEvents.push(sample({\r\n    source: combine({\r\n      fieldValue: $value,\r\n      form: form.$values,\r\n      rulesSources\r\n    }),\r\n    clock: validate\r\n  }));\r\n\r\n  validationEvents.push(sample({\r\n    source: combine({\r\n      fieldValue: $value,\r\n      form: form.$values,\r\n      rulesSources\r\n    }),\r\n    clock: form.validate\r\n  }));\r\n\r\n  const addErrorWithValue = sample({\r\n    source: $value,\r\n    clock: addError,\r\n    fn: (value, { rule, errorText }) => ({\r\n      rule,\r\n      value,\r\n      errorText\r\n    })\r\n  });\r\n\r\n  const addErrorsWithValue = sample({\r\n    source: $value,\r\n    clock: form.addErrors,\r\n    fn: (value, errors) => ({\r\n      value,\r\n      newErrors: errors\r\n    })\r\n  });\r\n\r\n  $errors\r\n    .on(validationEvents, (_, { form, fieldValue, rulesSources }) => validator(fieldValue, form, rulesSources))\r\n    .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\r\n    .on(addErrorsWithValue, (currErrors, { value, newErrors }) => {\r\n      const matchedErrors = [];\r\n\r\n      for (const newError of newErrors) {\r\n        if (newError.field !== field.name) continue;\r\n\r\n        matchedErrors.push({\r\n          value,\r\n          rule: newError.rule,\r\n          errorText: newError.errorText\r\n        });\r\n      }\r\n\r\n      return [...matchedErrors, ...currErrors];\r\n    }).reset(resetErrors, form.reset, reset, form.resetErrors);\r\n\r\n  if (!eventsNames.has('change')) {\r\n    $errors.reset(changed);\r\n  }\r\n}\r\n\r\nexport function bindChangeEvent({ field, form }) {\r\n  const {\r\n    $value, $initValue, $touched, onChange, changed, name, reset, resetValue, filter\r\n  } = field;\r\n  const {\r\n    setForm, setInitialForm, resetForm, resetTouched, resetValues\r\n  } = form;\r\n  const resetValueWithInit = sample({\r\n    source: $initValue,\r\n    clock: merge([\r\n      reset,\r\n      resetValue,\r\n      resetValues,\r\n      resetForm\r\n    ])\r\n  });\r\n\r\n  $touched\r\n    .on(changed, () => true)\r\n    .reset(reset, resetForm, resetTouched);\r\n\r\n  if (filter) {\r\n    sample({\r\n      source: onChange,\r\n      filter: filter,\r\n      target: changed\r\n    });\r\n  } else {\r\n    sample({\r\n      source: onChange,\r\n      filter: (() => true),\r\n      target: changed\r\n    });\r\n  }\r\n\r\n  $initValue\r\n    .on(setInitialForm, (curr, updateSet) => updateSet.hasOwnProperty(name)\r\n      ? updateSet[name]\r\n      : curr);\r\n\r\n  $value\r\n    .on(changed, (_, value) => value)\r\n    .on([setForm, setInitialForm], (curr, updateSet) => updateSet.hasOwnProperty(name)\r\n      ? updateSet[name]\r\n      : curr)\r\n    .on(resetValueWithInit, (_, initValue) => initValue);\r\n}\r\n","import { combine } from 'effector';\r\n\r\nexport function createCombineValidator(rulesOrResolver) {\r\n  return (value, form, rulesSources) => {\r\n    const errors = [];\r\n    const rules = typeof rulesOrResolver === 'function'\r\n      ? rulesOrResolver(value, form)\r\n      : rulesOrResolver;\r\n\r\n    for (const [i, rule] of rules.entries()) {\r\n      const source = rulesSources ? rulesSources[i] : null;\r\n      const result = rule.validator(value, form, source);\r\n\r\n      if (typeof result === 'boolean' && !result) {\r\n        errors.push({\r\n          rule: rule.name,\r\n          errorText: rule.errorText,\r\n          value\r\n        });\r\n      }\r\n\r\n      if (typeof result === 'object' && !result.isValid) {\r\n        errors.push({\r\n          rule: rule.name,\r\n          errorText: result.errorText,\r\n          value\r\n        });\r\n      }\r\n    }\r\n\r\n    return errors;\r\n  };\r\n}\r\n\r\nexport function eachValid(fields) {\r\n  const firstErrors = [];\r\n\r\n  for (const fieldName in fields) {\r\n    if (!fields.hasOwnProperty(fieldName)) continue;\r\n\r\n    const { $firstError } = fields[fieldName];\r\n\r\n    firstErrors.push($firstError);\r\n  }\r\n\r\n  const $firstErrors = combine(firstErrors);\r\n\r\n  return $firstErrors.map((errors) => errors.every(error => error === null));\r\n}\r\n","import { combine, sample } from 'effector';\r\nimport { eachValid } from './validation';\r\nimport { createField, bindValidation, bindChangeEvent } from './field';\r\nimport { createFormUnit } from './create-form-unit';\r\n\r\nfunction createFormValuesStore(fields) {\r\n  const shape = {};\r\n\r\n  for (const fieldName in fields) {\r\n    if (!fields.hasOwnProperty(fieldName)) continue;\r\n\r\n    shape[fieldName] = fields[fieldName].$value;\r\n  }\r\n\r\n  return combine(shape);\r\n}\r\n\r\nexport function createForm(config) {\r\n  const {\r\n    filter: $filter, domain, fields: fieldsConfigs, validateOn, units\r\n  } = config;\r\n  const fields = {};\r\n  const dirtyFlagsArr = [];\r\n  const touchedFlagsArr = [];\r\n\r\n  for (const fieldName in fieldsConfigs) {\r\n    if (!fieldsConfigs.hasOwnProperty(fieldName)) continue;\r\n\r\n    const fieldConfig = fieldsConfigs[fieldName];\r\n    const field = createField(fieldName, fieldConfig, domain);\r\n\r\n    fields[fieldName] = field;\r\n    dirtyFlagsArr.push(field.$isDirty);\r\n    touchedFlagsArr.push(field.$touched);\r\n  }\r\n  const $form = createFormValuesStore(fields);\r\n  const $eachValid = eachValid(fields);\r\n  const $isFormValid = $filter\r\n    ? combine($eachValid, $filter, (valid, filter) => valid && filter)\r\n    : $eachValid;\r\n\r\n  const $isDirty = combine(dirtyFlagsArr).map((dirtyFlags) => dirtyFlags.some(Boolean));\r\n  const $touched = combine(touchedFlagsArr).map((touchedFlags) => touchedFlags.some(Boolean));\r\n  const $meta = combine({\r\n    isValid: $eachValid,\r\n    isDirty: $isDirty,\r\n    touched: $touched\r\n  });\r\n\r\n  const validate = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.validate\r\n  });\r\n  const submitForm = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.submit\r\n  });\r\n\r\n  const formValidated = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.formValidated\r\n  });\r\n\r\n  const setInitialForm = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.setInitialForm\r\n  });\r\n\r\n  const setForm = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.setForm\r\n  });\r\n\r\n  const addErrors = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.addErrors\r\n  });\r\n\r\n  const resetForm = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.reset\r\n  });\r\n\r\n  const resetValues = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.resetValues\r\n  });\r\n\r\n  const resetErrors = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.resetErrors\r\n  });\r\n\r\n  const resetTouched = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.resetTouched\r\n  });\r\n\r\n  const submitWithFormData = sample({\r\n    source: $form,\r\n    clock: submitForm\r\n  });\r\n\r\n  const validateWithFormData = sample({\r\n    source: $form,\r\n    clock: validate\r\n  });\r\n\r\n  for (const fieldName in fields) {\r\n    if (!fields.hasOwnProperty(fieldName)) continue;\r\n\r\n    const fieldConfig = fieldsConfigs[fieldName];\r\n    const field = fields[fieldName];\r\n\r\n    bindChangeEvent({\r\n      form: {\r\n        setForm,\r\n        setInitialForm,\r\n        resetForm,\r\n        resetTouched,\r\n        resetValues\r\n      },\r\n      field\r\n    });\r\n\r\n    bindValidation({\r\n      form: {\r\n        $values: $form,\r\n        submit: submitForm,\r\n        reset: resetForm,\r\n        addErrors,\r\n        resetValues,\r\n        resetErrors,\r\n        validate,\r\n        validateOn\r\n      },\r\n      fieldConfig,\r\n      field\r\n    }, { sid: fieldName });\r\n  }\r\n\r\n  sample({\r\n    source: submitWithFormData,\r\n    filter: $isFormValid,\r\n    // TODO: fix\r\n    target: formValidated\r\n  });\r\n\r\n  sample({\r\n    source: validateWithFormData,\r\n    filter: $isFormValid,\r\n    target: formValidated\r\n  });\r\n\r\n  const unitShape = {\r\n    isValid: $eachValid,\r\n    isDirty: $isDirty,\r\n    touched: $touched,\r\n    submit: submitForm,\r\n    reset: resetForm,\r\n    addErrors: addErrors,\r\n    validate,\r\n    setForm,\r\n    setInitialForm,\r\n    resetTouched,\r\n    resetValues,\r\n    resetErrors,\r\n    formValidated\r\n  };\r\n\r\n  return {\r\n    fields,\r\n    $values: $form,\r\n    $eachValid,\r\n    $isValid: $eachValid,\r\n    $isDirty: $isDirty,\r\n    $touched: $touched,\r\n    $meta,\r\n    submit: submitForm,\r\n    validate,\r\n    resetTouched,\r\n    addErrors,\r\n    reset: resetForm,\r\n    resetValues,\r\n    resetErrors,\r\n    setForm,\r\n    setInitialForm,\r\n    set: setForm,\r\n    formValidated,\r\n    '@@unitShape': () => unitShape\r\n  };\r\n}\r\n","import { useUnit } from 'effector-solid';\r\n\r\nconst isEmpty = (obj) => [Object, Array].includes((obj || {}).constructor)\r\n    && Object.entries((obj || {})).length === 0;\r\n\r\nexport const useForm = (currentForm, labelsForSignals) => {\r\n  const form = useUnit(currentForm);\r\n  const values = useUnit(currentForm.$values);\r\n  let signalValues = {};\r\n\r\n  if (!isEmpty(labelsForSignals)) {\r\n    labelsForSignals.forEach((label) => {\r\n      signalValues = { ...signalValues, [label]: useUnit(currentForm.fields[label]) };\r\n    });\r\n  }\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    form.submit();\r\n  };\r\n\r\n  return ({\r\n    ...form,\r\n    fields: currentForm.fields,\r\n    sumbit: submitHandler,\r\n    values,\r\n    signalValues\r\n  });\r\n};\r\n"],"names":["createFormUnit","store","init","domain","existing","effectorData","createStore","event","createEvent","createField","fieldName","fieldConfig","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","initValue","$value","units","sid","$errors","$firstError","map","errors","$initValue","$touched","$isTouched","$isDirty","combine","value","onChange","onBlur","changed","addError","validate","resetErrors","resetValue","reset","$isValid","firstError","$errorText","errorText","$field","isValid","isDirty","isTouched","unitShape","touched","name","set","filter","@@unitShape","bindValidation","params","form","field","rules","formValidationEvents","validateOn","fieldValidationEvents","rulesSources","source","i","validator","rulesOrResolver","rule","entries","result","push","eventsNames","Set","validationEvents","has","validationTrigger","sample","fieldValue","$values","clock","submit","merge","resetValues","addErrorWithValue","fn","addErrorsWithValue","addErrors","newErrors","on","_","newError","currErrors","matchedErrors","bindChangeEvent","setForm","setInitialForm","resetForm","resetTouched","resetValueWithInit","target","curr","updateSet","hasOwnProperty","createForm","config","$filter","fields","fieldsConfigs","dirtyFlagsArr","touchedFlagsArr","$form","shape","createFormValuesStore","$eachValid","firstErrors","every","error","eachValid","$isFormValid","valid","dirtyFlags","some","Boolean","touchedFlags","$meta","submitForm","formValidated","submitWithFormData","validateWithFormData","useForm","currentForm","labelsForSignals","useUnit","values","signalValues","obj","Object","Array","includes","constructor","length","forEach","label","sumbit","e","preventDefault"],"mappings":"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"}