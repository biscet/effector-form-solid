{"version":3,"file":"index.mjs","sources":["../src/effector-forms/create-form-unit.js","../src/effector-forms/field.js","../src/effector-forms/validation.js","../src/effector-forms/factory.js","../src/solid-hooks.jsx"],"sourcesContent":["import { createStore, createEvent } from 'effector';\r\n\r\nfunction store({ init, domain, existing }, effectorData) {\r\n  if (existing) {\r\n    return existing;\r\n  }\r\n\r\n  return domain\r\n    ? domain.createStore(init, effectorData)\r\n    : createStore(init, effectorData);\r\n}\r\n\r\nfunction event({ domain, existing }) {\r\n  if (existing) {\r\n    return existing;\r\n  }\r\n\r\n  return domain ? domain.createEvent() : createEvent();\r\n}\r\n\r\nexport const createFormUnit = {\r\n  store,\r\n  event\r\n};\r\n","import {\r\n  createStore, combine, sample, merge\r\n} from 'effector';\r\nimport { createCombineValidator } from './validation';\r\nimport { createFormUnit } from './create-form-unit';\r\n\r\nexport function createField(fieldName, fieldConfig, domain) {\r\n  var _a; var _b; var _c; var _d; var _e; var _f; var _g; var _h; var _j; var _k; var _l; var\r\n    _m;\r\n\r\n  const initValue = typeof fieldConfig.init === 'function'\r\n    ? fieldConfig.init()\r\n    : fieldConfig.init;\r\n\r\n  const $value = createFormUnit.store({\r\n    domain,\r\n    existing: (_a = fieldConfig.units) === null || _a === void 0 ? void 0 : _a.$value,\r\n    init: initValue\r\n  }, {\r\n    sid: `${fieldName}-$value`\r\n  });\r\n\r\n  const $errors = createFormUnit.store({\r\n    domain,\r\n    existing: (_b = fieldConfig.units) === null || _b === void 0 ? void 0 : _b.$errors,\r\n    init: []\r\n  }, {\r\n    sid: `${fieldName}-$errors`\r\n  });\r\n\r\n  const $firstError = $errors.map((errors) => errors[0] ? errors[0] : null);\r\n  const $initValue = createFormUnit.store({\r\n    domain,\r\n    existing: (_c = fieldConfig.units) === null || _c === void 0 ? void 0 : _c.$initValue,\r\n    init: initValue\r\n  }, {\r\n    sid: `${fieldName}-$initValue`\r\n  });\r\n\r\n  const $touched = createFormUnit.store({\r\n    domain,\r\n    existing: (_d = fieldConfig.units) === null || _d === void 0 ? void 0 : _d.$isTouched,\r\n    init: false\r\n  }, {\r\n    sid: `${fieldName}-$touched`\r\n  });\r\n\r\n  const $isDirty = combine($value, $initValue, (value, initValue) => value !== initValue);\r\n  const onChange = createFormUnit.event({\r\n    domain,\r\n    existing: (_e = fieldConfig.units) === null || _e === void 0 ? void 0 : _e.onChange\r\n  });\r\n\r\n  const onBlur = createFormUnit.event({\r\n    domain,\r\n    existing: (_f = fieldConfig.units) === null || _f === void 0 ? void 0 : _f.onBlur\r\n  });\r\n\r\n  const changed = createFormUnit.event({\r\n    domain,\r\n    existing: (_g = fieldConfig.units) === null || _g === void 0 ? void 0 : _g.changed\r\n  });\r\n\r\n  const addError = createFormUnit.event({\r\n    domain,\r\n    existing: (_h = fieldConfig.units) === null || _h === void 0 ? void 0 : _h.addError\r\n  });\r\n\r\n  const validate = createFormUnit.event({\r\n    domain,\r\n    existing: (_j = fieldConfig.units) === null || _j === void 0 ? void 0 : _j.validate\r\n  });\r\n\r\n  const resetErrors = createFormUnit.event({\r\n    domain,\r\n    existing: (_k = fieldConfig.units) === null || _k === void 0 ? void 0 : _k.resetErrors\r\n  });\r\n\r\n  const resetValue = createFormUnit.event({\r\n    domain,\r\n    existing: (_l = fieldConfig.units) === null || _l === void 0 ? void 0 : _l.resetValue\r\n  });\r\n\r\n  const reset = createFormUnit.event({\r\n    domain,\r\n    existing: (_m = fieldConfig.units) === null || _m === void 0 ? void 0 : _m.reset\r\n  });\r\n\r\n  const $isValid = $firstError.map((firstError) => firstError === null);\r\n  const $errorText = $firstError.map((firstError) => (firstError === null || firstError === void 0 ? void 0 : firstError.errorText) || '');\r\n  const $field = combine({\r\n    value: $value,\r\n    errors: $errors,\r\n    firstError: $firstError,\r\n    isValid: $isValid,\r\n    isDirty: $isDirty,\r\n    isTouched: $touched\r\n  });\r\n\r\n  const unitShape = {\r\n    value: $value,\r\n    initValue: $initValue,\r\n    isValid: $isValid,\r\n    isDirty: $isDirty,\r\n    touched: $touched,\r\n    errors: $errors,\r\n    firstError: $firstError,\r\n    errorText: $errorText,\r\n    onChange,\r\n    onBlur,\r\n    addError,\r\n    validate,\r\n    reset,\r\n    resetErrors,\r\n    resetValue\r\n  };\r\n\r\n  return {\r\n    changed,\r\n    name: fieldName,\r\n    $initValue,\r\n    $value,\r\n    $errors,\r\n    $firstError,\r\n    $errorText,\r\n    $isValid,\r\n    $isDirty,\r\n    $isTouched: $touched,\r\n    $touched,\r\n    $field: $field,\r\n    onChange,\r\n    onBlur,\r\n    addError,\r\n    validate,\r\n    set: onChange,\r\n    reset,\r\n    resetErrors,\r\n    resetValue,\r\n    filter: fieldConfig.filter,\r\n    '@@unitShape': () => unitShape\r\n  };\r\n}\r\n\r\nexport function bindValidation(params) {\r\n  const { form, field, fieldConfig } = params;\r\n  const rules = fieldConfig.rules || [];\r\n  const formValidationEvents = form.validateOn || ['submit'];\r\n  const fieldValidationEvents = fieldConfig.validateOn || [];\r\n  const {\r\n    $value, $errors, onBlur, changed, addError, validate, resetErrors, resetValue, reset\r\n  } = field;\r\n  const rulesSources = typeof rules === 'function'\r\n    ? createStore([], { sid: `${field.name}-$rulesSources` })\r\n    : combine(rules.map(({ source }, i) => {\r\n      const sid = `${field.name}-$rulesSources-${i}`;\r\n      return source || createStore(null, { sid });\r\n    }));\r\n\r\n  const validator = createCombineValidator(rules);\r\n  const eventsNames = new Set([...formValidationEvents, ...fieldValidationEvents]);\r\n  const validationEvents = [];\r\n\r\n  if (eventsNames.has('submit')) {\r\n    const validationTrigger = sample({\r\n      source: combine({\r\n        fieldValue: $value,\r\n        form: form.$values,\r\n        rulesSources\r\n      }),\r\n      clock: form.submit\r\n    });\r\n\r\n    validationEvents.push(validationTrigger);\r\n  }\r\n\r\n  if (eventsNames.has('blur')) {\r\n    validationEvents.push(sample({\r\n      source: combine({\r\n        fieldValue: $value,\r\n        form: form.$values,\r\n        rulesSources\r\n      }),\r\n      clock: onBlur\r\n    }));\r\n  }\r\n\r\n  if (eventsNames.has('change')) {\r\n    validationEvents.push(sample({\r\n      source: combine({\r\n        fieldValue: $value,\r\n        form: form.$values,\r\n        rulesSources\r\n      }),\r\n      clock: merge([changed, resetValue, form.resetValues])\r\n    }));\r\n  }\r\n\r\n  validationEvents.push(sample({\r\n    source: combine({\r\n      fieldValue: $value,\r\n      form: form.$values,\r\n      rulesSources\r\n    }),\r\n    clock: validate\r\n  }));\r\n\r\n  validationEvents.push(sample({\r\n    source: combine({\r\n      fieldValue: $value,\r\n      form: form.$values,\r\n      rulesSources\r\n    }),\r\n    clock: form.validate\r\n  }));\r\n\r\n  const addErrorWithValue = sample({\r\n    source: $value,\r\n    clock: addError,\r\n    fn: (value, { rule, errorText }) => ({\r\n      rule,\r\n      value,\r\n      errorText\r\n    })\r\n  });\r\n\r\n  const addErrorsWithValue = sample({\r\n    source: $value,\r\n    clock: form.addErrors,\r\n    fn: (value, errors) => ({\r\n      value,\r\n      newErrors: errors\r\n    })\r\n  });\r\n\r\n  $errors\r\n    .on(validationEvents, (_, { form, fieldValue, rulesSources }) => validator(fieldValue, form, rulesSources))\r\n    .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\r\n    .on(addErrorsWithValue, (currErrors, { value, newErrors }) => {\r\n      const matchedErrors = [];\r\n\r\n      for (const newError of newErrors) {\r\n        if (newError.field !== field.name) continue;\r\n\r\n        matchedErrors.push({\r\n          value,\r\n          rule: newError.rule,\r\n          errorText: newError.errorText\r\n        });\r\n      }\r\n\r\n      return [...matchedErrors, ...currErrors];\r\n    }).reset(resetErrors, form.reset, reset, form.resetErrors);\r\n\r\n  if (!eventsNames.has('change')) {\r\n    $errors.reset(changed);\r\n  }\r\n}\r\n\r\nexport function bindChangeEvent({ field, form }) {\r\n  const {\r\n    $value, $initValue, $touched, onChange, changed, name, reset, resetValue, filter\r\n  } = field;\r\n  const {\r\n    setForm, setInitialForm, resetForm, resetTouched, resetValues\r\n  } = form;\r\n  const resetValueWithInit = sample({\r\n    source: $initValue,\r\n    clock: merge([\r\n      reset,\r\n      resetValue,\r\n      resetValues,\r\n      resetForm\r\n    ])\r\n  });\r\n\r\n  $touched\r\n    .on(changed, () => true)\r\n    .reset(reset, resetForm, resetTouched);\r\n\r\n  if (filter) {\r\n    sample({\r\n      source: onChange,\r\n      filter: filter,\r\n      target: changed\r\n    });\r\n  } else {\r\n    sample({\r\n      source: onChange,\r\n      filter: (() => true),\r\n      target: changed\r\n    });\r\n  }\r\n\r\n  $initValue\r\n    .on(setInitialForm, (curr, updateSet) => updateSet.hasOwnProperty(name)\r\n      ? updateSet[name]\r\n      : curr);\r\n\r\n  $value\r\n    .on(changed, (_, value) => value)\r\n    .on([setForm, setInitialForm], (curr, updateSet) => updateSet.hasOwnProperty(name)\r\n      ? updateSet[name]\r\n      : curr)\r\n    .on(resetValueWithInit, (_, initValue) => initValue);\r\n}\r\n","import { combine } from 'effector';\r\n\r\nexport function createCombineValidator(rulesOrResolver) {\r\n  return (value, form, rulesSources) => {\r\n    const errors = [];\r\n    const rules = typeof rulesOrResolver === 'function'\r\n      ? rulesOrResolver(value, form)\r\n      : rulesOrResolver;\r\n\r\n    for (const [i, rule] of rules.entries()) {\r\n      const source = rulesSources ? rulesSources[i] : null;\r\n      const result = rule.validator(value, form, source);\r\n\r\n      if (typeof result === 'boolean' && !result) {\r\n        errors.push({\r\n          rule: rule.name,\r\n          errorText: rule.errorText,\r\n          value\r\n        });\r\n      }\r\n\r\n      if (typeof result === 'object' && !result.isValid) {\r\n        errors.push({\r\n          rule: rule.name,\r\n          errorText: result.errorText,\r\n          value\r\n        });\r\n      }\r\n    }\r\n\r\n    return errors;\r\n  };\r\n}\r\n\r\nexport function eachValid(fields) {\r\n  const firstErrors = [];\r\n\r\n  for (const fieldName in fields) {\r\n    if (!fields.hasOwnProperty(fieldName)) continue;\r\n\r\n    const { $firstError } = fields[fieldName];\r\n\r\n    firstErrors.push($firstError);\r\n  }\r\n\r\n  const $firstErrors = combine(firstErrors);\r\n\r\n  return $firstErrors.map((errors) => errors.every(error => error === null));\r\n}\r\n","import { combine, sample } from 'effector';\r\nimport { eachValid } from './validation';\r\nimport { createField, bindValidation, bindChangeEvent } from './field';\r\nimport { createFormUnit } from './create-form-unit';\r\n\r\nfunction createFormValuesStore(fields) {\r\n  const shape = {};\r\n\r\n  for (const fieldName in fields) {\r\n    if (!fields.hasOwnProperty(fieldName)) continue;\r\n\r\n    shape[fieldName] = fields[fieldName].$value;\r\n  }\r\n\r\n  return combine(shape);\r\n}\r\n\r\nexport function createForm(config) {\r\n  const {\r\n    filter: $filter, domain, fields: fieldsConfigs, validateOn, units\r\n  } = config;\r\n  const fields = {};\r\n  const dirtyFlagsArr = [];\r\n  const touchedFlagsArr = [];\r\n\r\n  for (const fieldName in fieldsConfigs) {\r\n    if (!fieldsConfigs.hasOwnProperty(fieldName)) continue;\r\n\r\n    const fieldConfig = fieldsConfigs[fieldName];\r\n    const field = createField(fieldName, fieldConfig, domain);\r\n\r\n    fields[fieldName] = field;\r\n    dirtyFlagsArr.push(field.$isDirty);\r\n    touchedFlagsArr.push(field.$touched);\r\n  }\r\n  const $form = createFormValuesStore(fields);\r\n  const $eachValid = eachValid(fields);\r\n  const $isFormValid = $filter\r\n    ? combine($eachValid, $filter, (valid, filter) => valid && filter)\r\n    : $eachValid;\r\n\r\n  const $isDirty = combine(dirtyFlagsArr).map((dirtyFlags) => dirtyFlags.some(Boolean));\r\n  const $touched = combine(touchedFlagsArr).map((touchedFlags) => touchedFlags.some(Boolean));\r\n  const $meta = combine({\r\n    isValid: $eachValid,\r\n    isDirty: $isDirty,\r\n    touched: $touched\r\n  });\r\n\r\n  const validate = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.validate\r\n  });\r\n  const submitForm = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.submit\r\n  });\r\n\r\n  const formValidated = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.formValidated\r\n  });\r\n\r\n  const setInitialForm = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.setInitialForm\r\n  });\r\n\r\n  const setForm = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.setForm\r\n  });\r\n\r\n  const addErrors = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.addErrors\r\n  });\r\n\r\n  const resetForm = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.reset\r\n  });\r\n\r\n  const resetValues = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.resetValues\r\n  });\r\n\r\n  const resetErrors = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.resetErrors\r\n  });\r\n\r\n  const resetTouched = createFormUnit.event({\r\n    domain,\r\n    existing: units === null || units === void 0 ? void 0 : units.resetTouched\r\n  });\r\n\r\n  const submitWithFormData = sample({\r\n    source: $form,\r\n    clock: submitForm\r\n  });\r\n\r\n  const validateWithFormData = sample({\r\n    source: $form,\r\n    clock: validate\r\n  });\r\n\r\n  for (const fieldName in fields) {\r\n    if (!fields.hasOwnProperty(fieldName)) continue;\r\n\r\n    const fieldConfig = fieldsConfigs[fieldName];\r\n    const field = fields[fieldName];\r\n\r\n    bindChangeEvent({\r\n      form: {\r\n        setForm,\r\n        setInitialForm,\r\n        resetForm,\r\n        resetTouched,\r\n        resetValues\r\n      },\r\n      field\r\n    });\r\n\r\n    bindValidation({\r\n      form: {\r\n        $values: $form,\r\n        submit: submitForm,\r\n        reset: resetForm,\r\n        addErrors,\r\n        resetValues,\r\n        resetErrors,\r\n        validate,\r\n        validateOn\r\n      },\r\n      fieldConfig,\r\n      field\r\n    }, { sid: fieldName });\r\n  }\r\n\r\n  sample({\r\n    source: submitWithFormData,\r\n    filter: $isFormValid,\r\n    // TODO: fix\r\n    target: formValidated\r\n  });\r\n\r\n  sample({\r\n    source: validateWithFormData,\r\n    filter: $isFormValid,\r\n    target: formValidated\r\n  });\r\n\r\n  const unitShape = {\r\n    isValid: $eachValid,\r\n    isDirty: $isDirty,\r\n    touched: $touched,\r\n    submit: submitForm,\r\n    reset: resetForm,\r\n    addErrors: addErrors,\r\n    validate,\r\n    setForm,\r\n    setInitialForm,\r\n    resetTouched,\r\n    resetValues,\r\n    resetErrors,\r\n    formValidated\r\n  };\r\n\r\n  return {\r\n    fields,\r\n    $values: $form,\r\n    $eachValid,\r\n    $isValid: $eachValid,\r\n    $isDirty: $isDirty,\r\n    $touched: $touched,\r\n    $meta,\r\n    submit: submitForm,\r\n    validate,\r\n    resetTouched,\r\n    addErrors,\r\n    reset: resetForm,\r\n    resetValues,\r\n    resetErrors,\r\n    setForm,\r\n    setInitialForm,\r\n    set: setForm,\r\n    formValidated,\r\n    '@@unitShape': () => unitShape\r\n  };\r\n}\r\n","import { useUnit } from \"effector-solid\";\r\n\r\nconst isEmpty = (obj) =>\r\n  [Object, Array].includes((obj || {}).constructor) &&\r\n  Object.entries(obj || {}).length === 0;\r\n\r\nexport const useFormSignals = (currentForm, signals) => {\r\n  const labelsForSignals = Object.keys(currentForm.fields);\r\n  let values = {};\r\n\r\n  if (isEmpty(signals)) {\r\n    labelsForSignals.forEach((label) => {\r\n      values = {\r\n        ...values,\r\n        [label]: useUnit(currentForm.fields[label]),\r\n      };\r\n    });\r\n  } else {\r\n    signals.forEach((label) => {\r\n      values = {\r\n        ...values,\r\n        [label]: useUnit(currentForm.fields[label]),\r\n      };\r\n    });\r\n  }\r\n\r\n  return values;\r\n};\r\n\r\nexport const useForm = (currentForm, signals) => {\r\n  const form = useUnit(currentForm);\r\n  const values = useFormSignals(currentForm, signals);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    form.submit();\r\n  };\r\n\r\n  return {\r\n    ...form,\r\n    submit: submitHandler,\r\n    values,\r\n  };\r\n};\r\n"],"names":["createFormUnit","store","init","domain","existing","effectorData","createStore","event","createEvent","createField","fieldName","fieldConfig","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","initValue","$value","units","sid","$errors","$firstError","map","errors","$initValue","$touched","$isTouched","$isDirty","combine","value","onChange","onBlur","changed","addError","validate","resetErrors","resetValue","reset","$isValid","firstError","$errorText","errorText","$field","isValid","isDirty","isTouched","unitShape","touched","name","set","filter","\"@@unitShape\"","bindValidation","params","form","field","rules","formValidationEvents","validateOn","fieldValidationEvents","rulesSources","source","i","validator","rulesOrResolver","rule","entries","result","push","createCombineValidator","eventsNames","Set","validationEvents","has","validationTrigger","sample","fieldValue","$values","clock","submit","merge","resetValues","addErrorWithValue","fn","addErrorsWithValue","addErrors","newErrors","on","_","newError","currErrors","matchedErrors","bindChangeEvent","setForm","setInitialForm","resetForm","resetTouched","resetValueWithInit","target","curr","updateSet","hasOwnProperty","createForm","config","$filter","fields","fieldsConfigs","dirtyFlagsArr","touchedFlagsArr","$form","shape","createFormValuesStore","$eachValid","firstErrors","every","error","eachValid","$isFormValid","valid","dirtyFlags","some","Boolean","touchedFlags","$meta","submitForm","formValidated","submitWithFormData","validateWithFormData","useFormSignals","currentForm","signals","labelsForSignals","Object","keys","values","obj","Array","includes","constructor","length","isEmpty","forEach","label","b","useUnit","useForm","e","preventDefault"],"mappings":"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"}